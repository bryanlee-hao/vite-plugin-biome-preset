{"version":3,"file":"biome-runner.js","sources":["../src/biome-runner.ts"],"sourcesContent":["import { execSync } from 'child_process'\nimport { resolve } from 'node:path'\n\nexport interface BiomeRunnerOptions {\n  formatOnSave?: boolean\n  extensions?: string[]\n  sourcePattern?: string\n  configPath?: string\n}\n\nconst biomeExecutable = 'biome'\nexport class BiomeRunner {\n  private options: Required<BiomeRunnerOptions>\n\n  constructor(options: BiomeRunnerOptions = {}) {\n    this.options = {\n      formatOnSave: options.formatOnSave ?? false,\n      extensions: options.extensions ?? ['.js', '.ts', '.jsx', '.tsx', '.vue'],\n      sourcePattern: options.sourcePattern ?? './src',\n      configPath: options.configPath ?? './biome.json',\n    }\n  }\n\n  // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶ÈúÄË¶Å Biome Â§ÑÁêÜ\n  isBiomeFile(file: string): boolean {\n    return (\n      this.options.extensions.some((ext) => file.endsWith(ext)) &&\n      !file.includes('node_modules') &&\n      !file.includes('.git')\n    )\n  }\n\n  // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Âú® sourcePattern ËåÉÂõ¥ÂÜÖ\n  private isFileInSourcePattern(file: string): boolean {\n    try {\n      const resolvedFile = resolve(file)\n      const resolvedSourcePattern = resolve(this.options.sourcePattern)\n\n      // Â¶ÇÊûú sourcePattern ÊòØÁõ∏ÂØπË∑ØÂæÑÔºåÊ£ÄÊü•Êñá‰ª∂ÊòØÂê¶Âú®ËØ•ÁõÆÂΩï‰∏ã\n      if (!this.options.sourcePattern.startsWith('**')) {\n        return resolvedFile.startsWith(resolvedSourcePattern)\n      }\n\n      // Â¶ÇÊûú sourcePattern ÂåÖÂê´ÈÄöÈÖçÁ¨¶ÔºåËøôÈáåÂèØ‰ª•Ê∑ªÂä†Êõ¥Â§çÊùÇÁöÑÈÄªËæë\n      // ÁõÆÂâçÁÆÄÂçïÂ§ÑÁêÜÔºåÂÅáËÆæÊòØÁõ∏ÂØπË∑ØÂæÑ\n      return true\n    } catch {\n      return false\n    }\n  }\n  // ËøáÊª§Êñá‰ª∂ÂàóË°®ÔºåÂè™‰øùÁïôÂú® sourcePattern ‰∏≠ÁöÑÊñá‰ª∂\n  private getFormatFilesPaths(files: string[]) {\n    // Â¶ÇÊûúÊåáÂÆö‰∫ÜÂÖ∑‰ΩìÊñá‰ª∂ÔºåÂàô‰ΩøÁî®Êñá‰ª∂Ë∑ØÂæÑÔºåÂê¶Âàô‰ΩøÁî®ÈªòËÆ§Ê®°Âºè\n    if (files && files.length > 0 && !files[0].includes('**')) {\n      // ËøáÊª§Êñá‰ª∂ÔºåÂè™‰øùÁïôÂú® sourcePattern ‰∏≠ÁöÑÊñá‰ª∂\n      const filteredFiles = files.filter(file => this.isFileInSourcePattern(file))\n      if (filteredFiles.length === 0) {\n        console.log(`‚ö†Ô∏è  Ê≤°ÊúâÊñá‰ª∂Âú®ÊåáÂÆöÁöÑ sourcePattern ${this.options.sourcePattern} ËåÉÂõ¥ÂÜÖ`)\n        return null\n      }\n      return filteredFiles\n    } else {\n      return [this.options.sourcePattern]\n    }\n  }\n\n  // ËøêË°å Biome format\n  async runFormat(files?: string[]): Promise<string | null> {\n    try {\n      const args = ['check', '--write', '--config-path', this.options.configPath]\n\n      const filteredFiles = this.getFormatFilesPaths(files || [])\n      if (!filteredFiles?.length) {\n        return null\n      }\n      args.push(...filteredFiles)\n\n      console.log(`üîÑ ÊâßË°å Biome format: ${biomeExecutable} ${args.join(' ')}`)\n\n      const result = execSync(`${biomeExecutable} ${args.join(' ')}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      })\n\n      console.log('‚úÖ Biome format ÂÆåÊàê')\n      return result\n    } catch (error: any) {\n      if (error.stderr) {\n        console.log('‚ö†Ô∏è  Biome format Ë≠¶Âëä:', error.stderr)\n      } else if (error.stdout) {\n        console.log('üìù Biome format ËæìÂá∫:', error.stdout)\n      }\n      console.log('‚úÖ Biome format ÂÆåÊàêÔºàÂèØËÉΩÊúâË≠¶ÂëäÔºâ')\n      return null\n    }\n  }\n\n  // ËøêË°å Biome lint\n  async runLint(files?: string[]): Promise<string | null> {\n    try {\n      const args = ['lint', '--config-path', this.options.configPath]\n\n      const filteredFiles = this.getFormatFilesPaths(files || [])\n      if (!filteredFiles?.length) {\n        return null\n      }\n      args.push(...filteredFiles)\n\n      console.log(`üîÑ ÊâßË°å Biome lint: ${biomeExecutable} ${args.join(' ')}`)\n\n      const result = execSync(`${biomeExecutable} ${args.join(' ')}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      })\n\n      console.log('‚úÖ Biome lint ÂÆåÊàê')\n      return result\n    } catch (error: any) {\n      if (error.stderr) {\n        console.log('‚ö†Ô∏è  Biome lint Ë≠¶Âëä:', error.stderr)\n      } else if (error.stdout) {\n        console.log('üìù Biome lint ËæìÂá∫:', error.stdout)\n      }\n      console.log('‚úÖ Biome lint ÂÆåÊàêÔºàÂèØËÉΩÊúâË≠¶ÂëäÔºâ')\n      return null\n    }\n  }\n\n  // Ê†πÊçÆÈÖçÁΩÆËøêË°åÁõ∏Â∫îÁöÑÊìç‰Ωú\n  async runOperation(files?: string[]): Promise<void> {\n    if (this.options.formatOnSave) {\n      await this.runFormat(files)\n    } else {\n      await this.runLint(files)\n    }\n  }\n\n  // ËøêË°åÂÆåÊï¥ÁöÑÊ£ÄÊü•ÂíåÊ†ºÂºèÂåñ\n  async runFullCheck(): Promise<void> {\n    await this.runFormat()\n    await this.runLint()\n  }\n}\n"],"names":[],"mappings":"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"}