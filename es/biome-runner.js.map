{"version":3,"file":"biome-runner.js","sources":["../src/biome-runner.ts"],"sourcesContent":["import { execSync } from 'child_process'\n\nexport interface BiomeRunnerOptions {\n  formatOnSave?: boolean\n  extensions?: string[]\n  sourcePattern?: string\n  configPath?: string\n}\n\nexport class BiomeRunner {\n  private options: Required<BiomeRunnerOptions>\n\n  constructor(options: BiomeRunnerOptions = {}) {\n    this.options = {\n      formatOnSave: options.formatOnSave ?? false,\n      extensions: options.extensions ?? ['.js', '.ts', '.jsx', '.tsx', '.vue'],\n      sourcePattern: options.sourcePattern ?? './src',\n      configPath: options.configPath ?? 'biome.json',\n    }\n  }\n\n  // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶ÈúÄË¶Å Biome Â§ÑÁêÜ\n  isBiomeFile(file: string): boolean {\n    return (\n      this.options.extensions.some((ext) => file.endsWith(ext)) &&\n      !file.includes('node_modules') &&\n      !file.includes('.git')\n    )\n  }\n\n  // ËøêË°å Biome format\n  async runFormat(files?: string[]): Promise<string | null> {\n    try {\n      const args = ['check', '--write', '--config-path', this.options.configPath]\n\n      // Â¶ÇÊûúÊåáÂÆö‰∫ÜÂÖ∑‰ΩìÊñá‰ª∂ÔºåÂàô‰ΩøÁî®Êñá‰ª∂Ë∑ØÂæÑÔºåÂê¶Âàô‰ΩøÁî®ÈªòËÆ§Ê®°Âºè\n      if (files && files.length > 0 && !files[0].includes('**')) {\n        args.push(...files)\n      } else {\n        args.push(this.options.sourcePattern)\n      }\n\n      console.log(`üîÑ ÊâßË°å Biome format: biome ${args.join(' ')}`)\n\n      const result = execSync(`npx biome ${args.join(' ')}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      })\n\n      console.log('‚úÖ Biome format ÂÆåÊàê')\n      return result\n    } catch (error: any) {\n      if (error.stdout) {\n        console.log('üìù Biome format ËæìÂá∫:', error.stdout)\n      }\n      if (error.stderr) {\n        // console.log('‚ö†Ô∏è  Biome format Ë≠¶Âëä:', error.stderr)\n      }\n      console.log('‚úÖ Biome format ÂÆåÊàêÔºàÂèØËÉΩÊúâË≠¶ÂëäÔºâ')\n      return null\n    }\n  }\n\n  // ËøêË°å Biome lint\n  async runLint(files?: string[]): Promise<string | null> {\n    try {\n      const args = ['lint', '--config-path', this.options.configPath]\n\n      // Â¶ÇÊûúÊåáÂÆö‰∫ÜÂÖ∑‰ΩìÊñá‰ª∂ÔºåÂàô‰ΩøÁî®Êñá‰ª∂Ë∑ØÂæÑÔºåÂê¶Âàô‰ΩøÁî®ÈªòËÆ§Ê®°Âºè\n      if (files && files.length > 0 && !files[0].includes('**')) {\n        args.push(...files)\n      } else {\n        args.push(this.options.sourcePattern)\n      }\n\n      console.log(`üîç ÊâßË°å Biome lint: biome ${args.join(' ')}`)\n\n      const result = execSync(`npx biome ${args.join(' ')}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      })\n\n      console.log('‚úÖ Biome lint ÂÆåÊàê')\n      return result\n    } catch (error: any) {\n      if (error.stdout) {\n        console.log('üìù Biome lint ËæìÂá∫:', error.stdout)\n      }\n      if (error.stderr) {\n        // console.log('‚ö†Ô∏è  Biome lint Ë≠¶Âëä:', error.stderr)\n      }\n      console.log('‚úÖ Biome lint ÂÆåÊàêÔºàÂèØËÉΩÊúâË≠¶ÂëäÔºâ')\n      return null\n    }\n  }\n\n  // Ê†πÊçÆÈÖçÁΩÆËøêË°åÁõ∏Â∫îÁöÑÊìç‰Ωú\n  async runOperation(files?: string[]): Promise<void> {\n    if (this.options.formatOnSave) {\n      await this.runFormat(files)\n    } else {\n      await this.runLint(files)\n    }\n  }\n\n  // ËøêË°åÂÆåÊï¥ÁöÑÊ£ÄÊü•ÂíåÊ†ºÂºèÂåñ\n  async runFullCheck(): Promise<void> {\n    await this.runFormat()\n    await this.runLint()\n  }\n}\n"],"names":[],"mappings":";AASO,MAAM,YAAY;AAAA,EAGvB,YAAY,UAA8B,IAAI;AAC5C,SAAK,UAAU;AAAA,MACb,cAAc,QAAQ,gBAAgB;AAAA,MACtC,YAAY,QAAQ,cAAc,CAAC,OAAO,OAAO,QAAQ,QAAQ,MAAM;AAAA,MACvE,eAAe,QAAQ,iBAAiB;AAAA,MACxC,YAAY,QAAQ,cAAc;AAAA,IAAA;AAAA,EACpC;AAAA;AAAA,EAIF,YAAY,MAAuB;AACjC,WACE,KAAK,QAAQ,WAAW,KAAK,CAAC,QAAQ,KAAK,SAAS,GAAG,CAAC,KACxD,CAAC,KAAK,SAAS,cAAc,KAC7B,CAAC,KAAK,SAAS,MAAM;AAAA,EAAA;AAAA;AAAA,EAKzB,MAAM,UAAU,OAA0C;AACxD,QAAI;AACF,YAAM,OAAO,CAAC,SAAS,WAAW,iBAAiB,KAAK,QAAQ,UAAU;AAG1E,UAAI,SAAS,MAAM,SAAS,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,IAAI,GAAG;AACzD,aAAK,KAAK,GAAG,KAAK;AAAA,MAAA,OACb;AACL,aAAK,KAAK,KAAK,QAAQ,aAAa;AAAA,MAAA;AAGtC,cAAQ,IAAI,6BAA6B,KAAK,KAAK,GAAG,CAAC,EAAE;AAEzD,YAAM,SAAS,SAAS,aAAa,KAAK,KAAK,GAAG,CAAC,IAAI;AAAA,QACrD,UAAU;AAAA,QACV,OAAO;AAAA,MAAA,CACR;AAED,cAAQ,IAAI,mBAAmB;AAC/B,aAAO;AAAA,IAAA,SACA,OAAY;AACnB,UAAI,MAAM,QAAQ;AAChB,gBAAQ,IAAI,uBAAuB,MAAM,MAAM;AAAA,MAAA;AAEjD,UAAI,MAAM,OAAQ;AAGlB,cAAQ,IAAI,0BAA0B;AACtC,aAAO;AAAA,IAAA;AAAA,EACT;AAAA;AAAA,EAIF,MAAM,QAAQ,OAA0C;AACtD,QAAI;AACF,YAAM,OAAO,CAAC,QAAQ,iBAAiB,KAAK,QAAQ,UAAU;AAG9D,UAAI,SAAS,MAAM,SAAS,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,IAAI,GAAG;AACzD,aAAK,KAAK,GAAG,KAAK;AAAA,MAAA,OACb;AACL,aAAK,KAAK,KAAK,QAAQ,aAAa;AAAA,MAAA;AAGtC,cAAQ,IAAI,2BAA2B,KAAK,KAAK,GAAG,CAAC,EAAE;AAEvD,YAAM,SAAS,SAAS,aAAa,KAAK,KAAK,GAAG,CAAC,IAAI;AAAA,QACrD,UAAU;AAAA,QACV,OAAO;AAAA,MAAA,CACR;AAED,cAAQ,IAAI,iBAAiB;AAC7B,aAAO;AAAA,IAAA,SACA,OAAY;AACnB,UAAI,MAAM,QAAQ;AAChB,gBAAQ,IAAI,qBAAqB,MAAM,MAAM;AAAA,MAAA;AAE/C,UAAI,MAAM,OAAQ;AAGlB,cAAQ,IAAI,wBAAwB;AACpC,aAAO;AAAA,IAAA;AAAA,EACT;AAAA;AAAA,EAIF,MAAM,aAAa,OAAiC;AAClD,QAAI,KAAK,QAAQ,cAAc;AAC7B,YAAM,KAAK,UAAU,KAAK;AAAA,IAAA,OACrB;AACL,YAAM,KAAK,QAAQ,KAAK;AAAA,IAAA;AAAA,EAC1B;AAAA;AAAA,EAIF,MAAM,eAA8B;AAClC,UAAM,KAAK,UAAA;AACX,UAAM,KAAK,QAAA;AAAA,EAAQ;AAEvB;"}